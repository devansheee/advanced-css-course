/* universal selector */
* {
  margin: 0px;
  padding: 0px;
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px); }
  /* 60% {
        transform: rotate(20deg);
      } */
  80% {
    transform: translateX(10px); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100); }
  80% {
    transform: translateX(-10px); }
  100% {
    opacity: 1;
    transform: translate(0px); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px); }
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.5) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); }

.btn-white {
  background-color: white;
  color: #777; }
  .btn-white::after {
    background-color: white; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75;
  animation-fill-mode: backwards; }

.header {
  /* 95% of viewport ht*/
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* will cover the img to the size of viewport */
  background-size: cover;
  /* top remains same  */
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 78%, 0 100%);
  position: relative; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* apply on the elements with animation to avoid shakky effects  */
  backface-visibility: hidden;
  margin-bottom: 60px; }
  .heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
        
        animation-delay: 3s;
        animation-iteration-count: 3s;
        */ }
  .heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out;
    /* 
        animation-name: moveInRight; */
    /* animation-duration: 1s; */ }

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px; }

.logo {
  height: 35px; }

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center; }

.row {
  max-width: 114rem;
  background-color: wheat;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: cornflowerblue;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + (2 * 6rem)); }

/* 1rem = 10px */
/* 

Pillars of writing good HTML and CSS

1. Responsive design
2. maintainable and scalable code (clean, readable, reusable)
3. web performance : less http req, less code, compress code, css preprocessor, less images, compress images

BTS : Load HTML -> parse HTML ===============================> DOM
                    |                                            |      
                    v                                            v           
                Load CSS => Parse CSS {Resolving conflics} ==> CSSOM
                                                                  |
                                                                  v

Final                   Website rendering         <======  Render Tree
 Rendering         the visual formatting model

                (box model, floats, etc)
                
*/
/* CSS Rule : {selector, declaration block}

casacade : process of combining different stylesheets and resolving conflicts b/w different CSS rules and declarations, when more than one rule applirs to a certain element 
  >> author declaration css : css by developers
  >> user agent css : css by browsers 

                    same imp?                       same specificity?
                    ------->                       ------------>
  importance (weight)              > specificity >               source order :::: for precedance order
                            (count the number of                    
                         occurances of each selector)
  User !important         1. inline                                 the last declaration in the code will override all others
  Author !important       2. IDs                                        and will be applied
  Author declarations     3. class, pseudo class
  User declarations       4. Elements and pseudo elm
  browser default
 */
/* > use !important as the last resource
> inline styles will have priority over external stylesheets
> * - universal selector : no specificity (0,0,0,0)
> rely more on specificity than on the order of selectors
> rely on order while using 3rd-party stylesheets : always put your author stylesheet :last */
/* css values processing



fonts (%)           x% * parent's computed font-size 

lengths(%)          x% * parents's computed width 


[font-based]
em(font)           x * parent computed font-size  
    
em(length)         x * current element computed font-size

rem                x * root computed font-size 
                   x * root computed length 

[Viewport-based]
vh 
(1vh = 1% of viewport ht)
vw 
(1vw = 1% of viewport wd)

  Inheritance

Every CSS prop must have a value : 

            Is there a cascaded value ?

            A. yes : 
                specified value = cascaded value 
            B. no :

                Is the property inherited? (specific to each prop)

                A. yes:
                    specified value = computed value of parent element 
                    (THIS IS INHERITANCE)
                B. no 
                specified value = initial value (specific to each prop)


inherited prop : (prop related to text)  font, color, 
non - inherited : margin , padding, border

'inherit' : forces inheritance on certain prop
'initial' : resets a prop to it's intial value



/* 

Pillars of writing good HTML and CSS

1. Responsive design
2. maintainable and scalable code (clean, readable, reusable)
3. web performance : less http req, less code, compress code, css preprocessor, less images, compress images

BTS : Load HTML -> parse HTML ===============================> DOM
                    |                                            |      
                    v                                            v           
                Load CSS => Parse CSS {Resolving conflics} ==> CSSOM
                                                                  |
                                                                  v

Final                   Website rendering         <======  Render Tree
 Rendering         the visual formatting model

                (box model, floats, etc)
                
CSS Rule : {selector, declaration block}

casacade : process of combining different stylesheets and resolving conflicts b/w different CSS rules and declarations, when more than one rule applirs to a certain element 
  >> author declaration css : css by developers
  >> user agent css : css by browsers 

                    same imp?                       same specificity?
                    ------->                       ------------>
  importance (weight)              > specificity >               source order :::: for precedance order
                            (count the number of                    
                         occurances of each selector)
  User !important         1. inline                                 the last declaration in the code will override all others
  Author !important       2. IDs                                        and will be applied
  Author declarations     3. class, pseudo class
  User declarations       4. Elements and pseudo elm
  browser default
> use !important as the last resource
> inline styles will have priority over external stylesheets
> * - universal selector : no specificity (0,0,0,0)
> rely more on specificity than on the order of selectors
> rely on order while using 3rd-party stylesheets : always put your author stylesheet :last */
/* css values processing



fonts (%)           x% * parent's computed font-size 

lengths(%)          x% * parents's computed width 


[font-based]
em(font)           x * parent computed font-size  
    
em(length)         x * current element computed font-size

rem                x * root computed font-size 
                   x * root computed length 

[Viewport-based]
vh 
(1vh = 1% of viewport ht)
vw 
(1vw = 1% of viewport wd)

Inheritance

Every CSS prop must have a value : 

            Is there a cascaded value ?

            A. yes : 
                specified value = cascaded value 
            B. no :

                Is the property inherited? (specific to each prop)

                A. yes:
                    specified value = computed value of parent element 
                    (THIS IS INHERITANCE)
                B. no 
                specified value = initial value (specific to each prop)


inherited prop : (prop related to text)  font, color, 
non - inherited : margin , padding, border

'inherit' : forces inheritance on certain prop
'initial' : resets a prop to it's intial value


NPM PACKAGES AND SAAS


SASS :: CSS preprocessor
compiler converts sass to css

features : 
            1. variables
            2. nesting
            3. operators
            4. partials and imports
            5. mixins
            6. functions
            7. extends
            8. control directives
sass has 2 syntax
            1. sass syntax
            2. scss syntax




 */
/* 
 
 BASIC RESPONSIVE DESIGN PRINCIPLES

    1. FLUID LAYOUTS
        use *(or vh vw)
        use max-width instead of width

    2. RESPONSIVE UNITS
        use rem instead of pixels

    3. FLEXIBLE IMAGES
        use % for dimension
        use it with max-width

    4. MEDIA QUERIES
        change styles on certain viewpoints called breakpoints


LAYOUT TYPES IN CSS

    1. FLOAT LAYOUTS
        using css float property
        old way

    2. FLEXBOX
        1-d layouts
        component layouts

    3. CSS GRIDS
        2-d grid layouts
        page layout and complex components
         
 */
